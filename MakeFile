#App
APP_N  = game
vendor_folder = src/vendors

#Compiler 
CXX = clang++
CFLAGS = -Wall -Wextra -g -std=c++20



#hInclude Paths
glfw_include =  $(vendor_folder)/glfw/include
glad_include = $(vendor_folder)/glad/include
glm_include = $(vendor_folder)/glm
INCLUDES = -I$(glfw_include) -I$(glad_include) -I$(glm_include)


#Lib Paths
glfw_lib = $(vendor_folder)/glfw/lib-arm64
LIB_PATHS = -L$(glfw_lib)


#Linker Objects
LIBS =  -lglfw3 -framework Cocoa -framework OpenGL -framework IOKit -framework CoreVideo


#NOTES
#what is the name of the glfw lib. 





#Output location
BIN = bin

#Create a string that lists all of the cpp files at the said directory and store in SRC
SRC_CPP = $(wildcard ./src/*.cpp) 

#Take the SRC string and replace every instance of .cpp with .o and store. Store the new string in OBJ
OBJ = $(SRC_CPP:.cpp=.o) 






#Control Flow
.Phony: run objClean buildClean #all targets that will be explicity called shoulid be placed here
run: all
all: buildClean dir libs game objClean
 

dir: 
	mkdir -p ./$(BIN)/build 

libs : 
	$(CXX) -o src/glad.o -c src/glad.c $(CFLAGS) $(INCLUDES)

#Linking Phase
game: $(OBJ)
	$(CXX) -o ./$(BIN)/game $^ $(LIB_PATHS) $(LIBS)
	

#Compilation Phase
%.o: %.cpp 
	$(CXX) -o $@ -c $< $(CFLAGS) $(INCLUDES)

buildClean:
	rm -f $(bin)/build/game
objClean:
	rm -f src/*.o

	

